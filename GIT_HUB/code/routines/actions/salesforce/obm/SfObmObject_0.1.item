package routines;

import java.util.ArrayList;
import java.util.List;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class SfObmObject {

	public static final String TYPE = "xsi:type";
	private String type;
	private List<SfObmObjectAttribute> sfObjectAttributes;
	
	public SfObmObject(String type) {
		this.type = type;
		this.sfObjectAttributes = new ArrayList<SfObmObjectAttribute>();
	}
	
	public String getType() {
		return this.type;
	}
	
	public void addSfObjectAttribute(SfObmObjectAttribute attribute) {
		this.sfObjectAttributes.add(attribute);
	}
	
	public SfObmObjectAttribute getSfObjectAttribute(int i) {
		return this.sfObjectAttributes.get(i);
	}
	
	public int getSfObjectAttributesSize() {
		return this.sfObjectAttributes.size();
	}
	
	public String toString() {
		String text = "SfObject [type = " + this.type + ", ["; 
		int size = getSfObjectAttributesSize();
		for (int i = 0; i < size; i++) {
			text = text + sfObjectAttributes.get(i).getKey() + " = " + sfObjectAttributes.get(i).getValue();
			if (i != size - 1) {
				text = text + ", ";
			}
		}
		return text + "]";
	}
}
